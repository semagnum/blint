{
    "rules": [
        {
            "description": "Default cube exists",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "MESH_CUBE",
            "issue_expr": "'Cube' in bpy.data.objects",
            "prop_label_expr": "",
            "fix_expr": "bpy.data.objects.remove(bpy.data.objects[\"Cube\"], do_unlink=True)"
        },
        {
            "description": "Avoid numeric name suffixes",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "OBJECT_DATA",
            "issue_expr": "o.name.split('.')[-1].isnumeric()",
            "prop_label_expr": "o.name",
            "iterable_expr": "bpy.data.objects",
            "iterable_var": "o"
        },
        {
            "description": "Animated seed is disabled",
            "enabled": true,
            "severity_icon": "ERROR",
            "category_icon": "TIME",
            "issue_expr": "curr_scene.render.engine == 'CYCLES' and not curr_scene.cycles.use_animated_seed",
            "prop_label_expr": "curr_scene.name",
            "fix_expr": "curr_scene.cycles.use_animated_seed = True",
            "iterable_expr": "bpy.data.scenes",
            "iterable_var": "curr_scene"
        },
        {
            "description": "Unapplied scale on modified object",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "MODIFIER",
            "issue_expr": "tuple(my_object.scale) != (1.0, 1.0, 1.0) and any(m.type in {'BEVEL', 'SOLIDIFY'} for m in my_object.modifiers)",
            "prop_label_expr": "my_object.name",
            "iterable_expr": "bpy.data.objects",
            "iterable_var": "my_object"
        },
        {
            "description": "Visibility attributes differ",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "HIDE_OFF",
            "issue_expr": "len({my_object.hide_viewport, my_object.hide_render, my_object.hide_get()}) != 1",
            "prop_label_expr": "my_object.name",
            "iterable_expr": "bpy.data.objects",
            "iterable_var": "my_object"
        },
        {
            "description": "Image not found",
            "enabled": true,
            "severity_icon": "ERROR",
            "category_icon": "IMAGE_DATA",
            "issue_expr": "my_image.source not in {'GENERATED', 'VIEWER'} and not __import__('os').path.isfile(bpy.path.abspath(my_image.filepath)) and my_image.packed_file is None",
            "prop_label_expr": "my_image.name",
            "iterable_expr": "bpy.data.images",
            "iterable_var": "my_image"
        },
        {
            "description": "Use GPU viewport denoising when available",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "RESTRICT_RENDER_OFF",
            "issue_expr": "my_scene.render.engine == 'CYCLES' and my_scene.cycles.use_preview_denoising and not my_scene.cycles.preview_denoising_use_gpu",
            "prop_label_expr": "my_scene.name",
            "fix_expr": "my_scene.cycles.preview_denoising_use_gpu = True",
            "iterable_expr": "bpy.data.scenes",
            "iterable_var": "my_scene"
        },
        {
            "description": "Use GPU render denoising when available",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "RESTRICT_RENDER_OFF",
            "issue_expr": "my_scene.render.engine == 'CYCLES' and my_scene.cycles.use_denoising and not my_scene.cycles.denoising_use_gpu",
            "prop_label_expr": "my_scene.name",
            "fix_expr": "my_scene.cycles.denoising_use_gpu = True",
            "iterable_expr": "bpy.data.scenes",
            "iterable_var": "my_scene"
        },
        {
            "description": "Use GPU compositing when available",
            "enabled": true,
            "severity_icon": "INFO",
            "category_icon": "NODE_COMPOSITING",
            "issue_expr": "my_scene.render.compositor_device != 'GPU'",
            "prop_label_expr": "my_scene.name",
            "fix_expr": "my_scene.render.compositor_device = 'GPU'",
            "iterable_expr": "bpy.data.scenes",
            "iterable_var": "my_scene"
        }
    ]
}